// This is a patch for the query route to properly parse and use the pipeline generated by the DeepSeekService

// Get the specified collection for executing the processed query
const db = mongoose.connection.db;
const mongoCollection = db.collection(collection);

// Parse the pipeline from the Deepseek response
let pipeline;
try {
    // Try to parse the content as a JSON array
    pipeline = JSON.parse(deepseekResponse.content);
    console.log('Successfully parsed Deepseek response as JSON');
    
    // Ensure it's an array
    if (!Array.isArray(pipeline)) {
        console.warn('Parsed pipeline is not an array:', typeof pipeline);
        // If it's not an array but an object with a pipeline property, use that
        if (pipeline && pipeline.pipeline && Array.isArray(pipeline.pipeline)) {
            pipeline = pipeline.pipeline;
            console.log('Using pipeline property from response');
        } else {
            console.warn('Using fallback empty pipeline');
            pipeline = [{ $match: {} }, { $limit: 20 }];
        }
    }
} catch (parseError) {
    console.error('Error parsing Deepseek response as JSON:', parseError.message);
    console.log('Raw Deepseek response:', deepseekResponse.content);
    
    // Try to extract a JSON array from the content using regex
    const jsonMatch = deepseekResponse.content.match(/\[\s*\{.*\}\s*\]/s);
    if (jsonMatch) {
        try {
            pipeline = JSON.parse(jsonMatch[0]);
            console.log('Successfully extracted and parsed JSON from response');
        } catch (extractError) {
            console.error('Error parsing extracted JSON:', extractError.message);
            pipeline = [{ $match: {} }, { $limit: 20 }];
        }
    } else {
        console.warn('Could not extract JSON array from response, using fallback');
        pipeline = [{ $match: {} }, { $limit: 20 }];
    }
}

console.log('Final pipeline to execute:', JSON.stringify(pipeline));
const results = await mongoCollection.aggregate(pipeline).toArray();
