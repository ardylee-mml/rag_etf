require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const deepseekService = require('./src/services/deepseekService');

// Create Express app
const app = express();
const PORT = process.env.PORT || 3002;

// Middleware
app.use(express.json());
app.use(cors());

// Simple authentication middleware
const authMiddleware = (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: 'Authentication required' });
    }

    const token = authHeader.split(' ')[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ message: 'Invalid token' });
  }
};

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => {
    console.error('MongoDB connection error:', err);
    process.exit(1);
  });

// Routes
app.get('/api/status', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date() });
});

// Login route
app.post('/api/auth/login', (req, res) => {
  const { username, password } = req.body;

  // Simple authentication for testing
  if (username === 'test' && password === 'test') {
    const token = jwt.sign(
      { userId: 'test-user-id', username: 'test' },
      process.env.JWT_SECRET || 'your-secret-key',
      { expiresIn: '24h' }
    );

    return res.json({ token });
  }

  res.status(401).json({ message: 'Invalid credentials' });
});

// Simple query route
app.post('/api/query', authMiddleware, async (req, res) => {
  try {
    const { query, collection = 'events', schemaInfo } = req.body;

    if (!query) {
      return res.status(400).json({ message: 'Query is required' });
    }

    console.log('Processing query:', query);
    console.log('Collection:', collection);
    console.log('Schema Info:', schemaInfo);

    // Process the query through Deepseek LLM
    let pipeline = null;
    let explanation = '';
    let results = [];

    try {
      const deepseekResponse = await deepseekService.processQuery(
        query, collection, schemaInfo
      );
      console.log('Deepseek Response:', deepseekResponse);

      if (deepseekResponse && deepseekResponse.content) {
        try {
          // Try to parse the content as a MongoDB query
          pipeline = JSON.parse(deepseekResponse.content);
          explanation = `MongoDB aggregation pipeline generated by Deepseek LLM based on natural language query: "${query}"`;
        } catch (parseError) {
          console.error('Error parsing Deepseek response:', parseError);
          // Will use fallback pipeline below
        }
      }
    } catch (deepseekError) {
      console.error('Error calling Deepseek service:', deepseekError);
      // Will use fallback pipeline below
    }

    // If no valid pipeline was generated, use a fallback
    if (!pipeline || !Array.isArray(pipeline)) {
      console.log('Using fallback pipeline');
      pipeline = [{ $match: {} }, { $limit: 10 }];
      explanation = 'Fallback query that returns the first 10 documents';
    }

    // Get the specified collection
    const db = mongoose.connection.db;
    const mongoCollection = db.collection(collection);

    // Execute the aggregation pipeline
    results = await mongoCollection.aggregate(pipeline).toArray();

    // Log what we're sending to the client
    console.log(`Sending response to client with ${results.length} results`);

    res.json({
      query,
      timestamp: new Date(),
      results,
      processedQuery: `db.${collection}.aggregate(${JSON.stringify(pipeline)})`,
      pipeline: pipeline,
      explanation: explanation
    });
  } catch (error) {
    console.error('Query execution error:', error);
    res.status(500).json({ message: 'Query execution failed', error: error.message });
  }
});

// Relationship query route - FIXED VERSION
app.post('/api/query/relationship', authMiddleware, async (req, res) => {
  try {
    const { query, primaryCollection, relatedCollection, schemaInfo } = req.body;

    if (!query || !primaryCollection || !relatedCollection) {
      return res.status(400).json({
        message: 'Query, primaryCollection, and relatedCollection are required'
      });
    }

    console.log('Processing relationship query:', query);
    console.log('Primary Collection:', primaryCollection);
    console.log('Related Collection:', relatedCollection);

    // Process the query through Deepseek LLM
    let pipeline = null;
    let explanation = '';
    let message = null;

    try {
      const deepseekResponse = await deepseekService.processQuery(
        query, primaryCollection, schemaInfo
      );
      console.log('Deepseek Response:', deepseekResponse);

      if (deepseekResponse && deepseekResponse.content) {
        try {
          // Try to parse the content as a MongoDB query
          pipeline = JSON.parse(deepseekResponse.content);
          explanation = `MongoDB aggregation pipeline generated by Deepseek LLM based on natural language query: "${query}"`;
        } catch (parseError) {
          console.error('Error parsing Deepseek response:', parseError);
          // Will use fallback pipeline below
        }
      }
    } catch (deepseekError) {
      console.error('Error calling Deepseek service:', deepseekError);
      // Will use fallback pipeline below
    }

    // If no valid pipeline was generated, use a fallback
    if (!pipeline || !Array.isArray(pipeline)) {
      console.log('Using fallback pipeline for relationship query');

      // Special case for events-questions relationship
      if (primaryCollection === 'events' && relatedCollection === 'questions' ||
          primaryCollection === 'questions' && relatedCollection === 'events') {

        // Determine which collection to start with
        const startCollection = primaryCollection === 'events' ? 'events' : 'questions';

        if (startCollection === 'events') {
          // Start with events collection
          pipeline = [
            { $match: { type: 'question' } },
            { $lookup: {
                from: 'questions',
                localField: 'context.questionId',
                foreignField: '_id',
                as: 'related'
              }
            },
            // Skip the $unwind stage since it fails when there are no matches
            { $project: {
                event_id: '$_id',
                player_id: '$playerId',
                question_id: '$context.questionId',
                correct: '$correct',
                timeTaken: '$timeTaken',
                type: '$type',
                // Include related question data if available, otherwise null
                question_text: { $cond: { if: { $gt: [{ $size: '$related' }, 0] }, then: { $arrayElemAt: ['$related.text', 0] }, else: null } }
              }
            }
          ];

          // If the query is about average attempts
          if (query.toLowerCase().includes('average') &&
              (query.toLowerCase().includes('answer') || query.toLowerCase().includes('attempt'))) {
            pipeline = [
              { $match: { type: 'question' } },
              { $group: {
                  _id: {
                    playerId: '$playerId',
                    questionId: '$context.questionId'
                  },
                  count: { $sum: 1 }
                }
              },
              { $group: {
                  _id: '$_id.questionId',
                  avgAttempts: { $avg: '$count' }
                }
              },
              { $project: {
                  questionId: '$_id',
                  avgAttempts: 1,
                  _id: 0
                }
              },
              { $sort: { avgAttempts: -1 } }
            ];
            explanation = 'Calculating average number of attempts per question';
          } else {
            explanation = 'Finding events with type "question" and their related question details';
          }
        } else {
          // Start with questions collection
          pipeline = [
            { $match: {} },
            { $lookup: {
                from: 'events',
                localField: '_id',
                foreignField: 'context.questionId',
                as: 'events'
              }
            },
            { $project: {
                question_id: '$_id',
                question_text: '$text',
                event_count: { $size: '$events' }
              }
            }
          ];
          explanation = 'Finding questions and their related events';
        }
      } else {
        // Default fallback for other relationships
        pipeline = [
          { $match: {} },
          { $limit: 20 }
        ];
        explanation = `Fallback query for ${primaryCollection}-${relatedCollection} relationship`;
      }
    }

    // Get the specified collection
    const db = mongoose.connection.db;
    const mongoCollection = db.collection(primaryCollection);

    // Execute the aggregation pipeline
    const results = await mongoCollection.aggregate(pipeline).toArray();

    // Log what we're sending to the client
    console.log(`Sending response to client with ${results.length} results`);

    res.json({
      query,
      timestamp: new Date(),
      results,
      processedQuery: `db.${primaryCollection}.aggregate(${JSON.stringify(pipeline)})`,
      pipeline: pipeline,
      explanation: explanation,
      message: message
    });
  } catch (error) {
    console.error('Relationship query execution error:', error);
    res.status(500).json({ message: 'Relationship query execution failed' });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
